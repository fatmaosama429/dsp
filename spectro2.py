# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'spaeco4.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import math
import numpy as np
# import matplotlib.pyplot as plt
import matplotlib.pyplot as plot
from PyQt5 import QtCore, QtGui, QtWidgets
import pandas as pd
from PyQt5.QtWidgets import QApplication, QMainWindow,QVBoxLayout,QAction,QFileDialog

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        def ToolBar(self):
            AddFile = QAction('Open File',self)
            AddFile.triggered.connect(self.open_sheet)
            self.toolBar= self.addToolBar('TOOL BAR')
            self.toolBar.addAction(AddFile)
            self.toolBar.setObjectName("toolBar")

        def open_sheet(self):
            path = QFileDialog.getOpenFileName(self, "Open", "", "CSV Files (*.csv);;All Files (*)")
            if path[0]!='':
                self.path_a= self.FileN=path[0]
        #plotting the spectrogram####
        # Define the list of frequencies

        self.frequencies = np.arange(5,105,5)

 

        # Sampling Frequency
        self.data=pd.DataFrame(pd.read_csv('ECG_CSV_SingleLead.csv', delimiter =None))
        self.Data=self.data.iloc[1:][1: ]
        self.sub2 = self.Data.values.tolist()
  
        self.samplingFrequency   = len(self.sub2)+1

 

        # Create two ndarrays

        self.s1 = np.empty([0]) # For samples

        self.s2 = np.empty([0]) # For signal

 

        # Start Value of the sample

        self.start   = 1

 

        # Stop Value of the sample

        self.stop    = self.samplingFrequency

 

        for self.frequency in self.frequencies:

            self.sub1 = np.arange(self.start, self.stop, 1)

 

    # Signal - Sine wave with varying frequency + Noise
     # sub 2 hya l signal == s2
     #sub1 hya l x axis == s1
        # self.sub2 = np.sin(2*np.pi*self.sub1*self.frequency*1/self.samplingFrequency)+np.random.randn(len(self.sub1))
        self.data=pd.DataFrame(pd.read_csv('ECG_CSV_SingleLead.csv', delimiter =None))
        self.Data=self.data.iloc[1:][1: ]
        self.sub2 = self.Data.values.tolist()
  

        self.s1      = np.append(self.s1, self.sub1)

        self.s2      = np.append(self.s2, self.sub2)

   

        self.start   = self.stop+1

        self.stop    = self.start+self.samplingFrequency

 

        # Plot the signal

        plot.subplot(211)

        plot.plot(self.s1,self.s2)

        plot.xlabel('Sample')

        plot.ylabel('Amplitude')

 

 

        # Plot the spectrogram

        plot.subplot(212)

        self.powerSpectrum, self.freqenciesFound, self.time, self.imageAxis = plot.specgram(self.s2, Fs=self.samplingFrequency)

        plot.xlabel('Time')

        plot.ylabel('Frequency')

 

        plot.show()   
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
