# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sigviewer.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Qt5Agg')
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg, NavigationToolbar2QT as Navi
from matplotlib.figure import Figure
import seaborn as sns
import pandas as pd
import sip
import platform

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(807, 454)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.tabWidget = QtWidgets.QTabWidget(self.groupBox)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.horizontalLayout_2.addWidget(self.tabWidget)
        spacerItem = QtWidgets.QSpacerItem(20, 328, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.horizontalLayout_2.addItem(spacerItem)
        self.horizontalLayout.addWidget(self.groupBox)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 807, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menumode = QtWidgets.QMenu(self.menubar)
        self.menumode.setObjectName("menumode")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuToolbar = QtWidgets.QMenu(self.menuView)
        self.menuToolbar.setObjectName("menuToolbar")
        self.menuAnimations = QtWidgets.QMenu(self.menuView)
        self.menuAnimations.setObjectName("menuAnimations")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("file")
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionUndo = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("undo")
        self.actionUndo.setIcon(icon)
        self.actionUndo.setObjectName("actionUndo")
        self.actionRedo = QtWidgets.QAction(MainWindow)
        self.actionRedo.setObjectName("actionRedo")
        self.actionto_all_channels = QtWidgets.QAction(MainWindow)
        self.actionto_all_channels.setObjectName("actionto_all_channels")
        self.actioncopy_to_channels = QtWidgets.QAction(MainWindow)
        self.actioncopy_to_channels.setObjectName("actioncopy_to_channels")
        self.actiondelete = QtWidgets.QAction(MainWindow)
        self.actiondelete.setObjectName("actiondelete")
        self.actionchange_channel = QtWidgets.QAction(MainWindow)
        self.actionchange_channel.setObjectName("actionchange_channel")
        self.actionchange_type = QtWidgets.QAction(MainWindow)
        self.actionchange_type.setObjectName("actionchange_type")
        self.actioninsert_over = QtWidgets.QAction(MainWindow)
        self.actioninsert_over.setObjectName("actioninsert_over")
        self.actionNew_event = QtWidgets.QAction(MainWindow)
        self.actionNew_event.setObjectName("actionNew_event")
        self.actionedit_event = QtWidgets.QAction(MainWindow)
        self.actionedit_event.setObjectName("actionedit_event")
        self.actionScroll = QtWidgets.QAction(MainWindow)
        self.actionScroll.setObjectName("actionScroll")
        self.actionView_options = QtWidgets.QAction(MainWindow)
        self.actionView_options.setShortcut("")
        self.actionView_options.setObjectName("actionView_options")
        self.actionStatus_bar = QtWidgets.QAction(MainWindow)
        self.actionStatus_bar.setObjectName("actionStatus_bar")
        self.actionEvents = QtWidgets.QAction(MainWindow)
        self.actionEvents.setObjectName("actionEvents")
        self.actionChannels = QtWidgets.QAction(MainWindow)
        self.actionChannels.setObjectName("actionChannels")
        self.actionScale_All = QtWidgets.QAction(MainWindow)
        self.actionScale_All.setObjectName("actionScale_All")
        self.actionZoom_in_vertical = QtWidgets.QAction(MainWindow)
        self.actionZoom_in_vertical.setObjectName("actionZoom_in_vertical")
        self.actionZoom_out_vertical = QtWidgets.QAction(MainWindow)
        self.actionZoom_out_vertical.setObjectName("actionZoom_out_vertical")
        self.actionZoom_in_horizontal = QtWidgets.QAction(MainWindow)
        self.actionZoom_in_horizontal.setObjectName("actionZoom_in_horizontal")
        self.actionZoom_out_horizontal = QtWidgets.QAction(MainWindow)
        self.actionZoom_out_horizontal.setObjectName("actionZoom_out_horizontal")
        self.actionGo_to = QtWidgets.QAction(MainWindow)
        self.actionGo_to.setObjectName("actionGo_to")
        self.actionGoto_and_Select_Next_Event = QtWidgets.QAction(MainWindow)
        self.actionGoto_and_Select_Next_Event.setObjectName("actionGoto_and_Select_Next_Event")
        self.actionGoto_and_Select_Previos_Event = QtWidgets.QAction(MainWindow)
        self.actionGoto_and_Select_Previos_Event.setObjectName("actionGoto_and_Select_Previos_Event")
        self.actionFit_View_to_Selected_Event = QtWidgets.QAction(MainWindow)
        self.actionFit_View_to_Selected_Event.setObjectName("actionFit_View_to_Selected_Event")
        self.actionHide_Events_of_Other_Types = QtWidgets.QAction(MainWindow)
        self.actionHide_Events_of_Other_Types.setObjectName("actionHide_Events_of_Other_Types")
        self.actionShow_All_Events = QtWidgets.QAction(MainWindow)
        self.actionShow_All_Events.setObjectName("actionShow_All_Events")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionExort_to = QtWidgets.QAction(MainWindow)
        self.actionExort_to.setObjectName("actionExort_to")
        self.actionExport_to_GDF = QtWidgets.QAction(MainWindow)
        self.actionExport_to_GDF.setObjectName("actionExport_to_GDF")
        self.actionExport_Events = QtWidgets.QAction(MainWindow)
        self.actionExport_Events.setObjectName("actionExport_Events")
        self.actionImport_Events = QtWidgets.QAction(MainWindow)
        self.actionImport_Events.setObjectName("actionImport_Events")
        self.actionInfo = QtWidgets.QAction(MainWindow)
        self.actionInfo.setObjectName("actionInfo")
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setShortcut("")
        self.actionClose.setObjectName("actionClose")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionCalculate_mean = QtWidgets.QAction(MainWindow)
        self.actionCalculate_mean.setObjectName("actionCalculate_mean")
        self.actionPower_Spectrum = QtWidgets.QAction(MainWindow)
        self.actionPower_Spectrum.setObjectName("actionPower_Spectrum")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionFile = QtWidgets.QAction(MainWindow)
        self.actionFile.setCheckable(True)
        self.actionFile.setChecked(True)
        self.actionFile.setObjectName("actionFile")
        self.actionMode = QtWidgets.QAction(MainWindow)
        self.actionMode.setCheckable(True)
        self.actionMode.setChecked(True)
        self.actionMode.setObjectName("actionMode")
        self.actionView = QtWidgets.QAction(MainWindow)
        self.actionView.setCheckable(True)
        self.actionView.setChecked(True)
        self.actionView.setObjectName("actionView")
        self.actionHide_All_Toolbars = QtWidgets.QAction(MainWindow)
        self.actionHide_All_Toolbars.setObjectName("actionHide_All_Toolbars")
        self.actionAnimation = QtWidgets.QAction(MainWindow)
        self.actionAnimation.setObjectName("actionAnimation")
        self.actionSet_animation_duration = QtWidgets.QAction(MainWindow)
        self.actionSet_animation_duration.setObjectName("actionSet_animation_duration")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSave_As)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExort_to)
        self.menuFile.addAction(self.actionExport_to_GDF)
        self.menuFile.addAction(self.actionExport_Events)
        self.menuFile.addAction(self.actionImport_Events)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionInfo)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionClose)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionto_all_channels)
        self.menuEdit.addAction(self.actioncopy_to_channels)
        self.menuEdit.addAction(self.actiondelete)
        self.menuEdit.addAction(self.actionchange_channel)
        self.menuEdit.addAction(self.actionchange_type)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actioninsert_over)
        self.menumode.addAction(self.actionNew_event)
        self.menumode.addAction(self.actionedit_event)
        self.menumode.addAction(self.actionScroll)
        self.menumode.addAction(self.actionView_options)
        self.menuToolbar.addAction(self.actionFile)
        self.menuToolbar.addAction(self.actionMode)
        self.menuToolbar.addAction(self.actionView)
        self.menuToolbar.addSeparator()
        self.menuToolbar.addAction(self.actionHide_All_Toolbars)
        self.menuAnimations.addAction(self.actionAnimation)
        self.menuAnimations.addAction(self.actionSet_animation_duration)
        self.menuView.addAction(self.menuToolbar.menuAction())
        self.menuView.addAction(self.actionStatus_bar)
        self.menuView.addAction(self.menuAnimations.menuAction())
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionEvents)
        self.menuView.addAction(self.actionChannels)
        self.menuView.addAction(self.actionScale_All)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionZoom_in_vertical)
        self.menuView.addAction(self.actionZoom_out_vertical)
        self.menuView.addAction(self.actionZoom_in_horizontal)
        self.menuView.addAction(self.actionZoom_out_horizontal)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionGo_to)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionGoto_and_Select_Next_Event)
        self.menuView.addAction(self.actionGoto_and_Select_Previos_Event)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionFit_View_to_Selected_Event)
        self.menuView.addAction(self.actionHide_Events_of_Other_Types)
        self.menuView.addAction(self.actionShow_All_Events)
        self.menuTools.addAction(self.actionCalculate_mean)
        self.menuTools.addAction(self.actionPower_Spectrum)
        self.menuHelp.addAction(self.actionAbout)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menumode.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addSeparator()

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.pushButton.clicked.connect(self.getFile)
        self.actionOpen_csv_file.triggered.connect(self.getFile)


        def getFile(self):
            self.filename = QFileDialog.getOpenFileName(filter = "csv (*.csv)")[0]
            print("File :", self.filename)
            self.readData()
        
        def readData(self):
            import os
            base_name = os.path.basename(self.filename)
            self.Title = os.path.splitext(base_name)[0]
            print('FILE',self.Title )
            self.df = pd.read_csv(self.filename,encoding = 'utf-8').fillna(0)
            self.Update(self.themes[0]) # lets 0th theme be the default : bmh
        








    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "GroupBox"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "signals"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "exents"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menumode.setTitle(_translate("MainWindow", "mode "))
        self.menuView.setTitle(_translate("MainWindow", "View "))
        self.menuToolbar.setTitle(_translate("MainWindow", "Toolbar "))
        self.menuAnimations.setTitle(_translate("MainWindow", "Animations "))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help "))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionUndo.setText(_translate("MainWindow", "Undo"))
        self.actionUndo.setShortcut(_translate("MainWindow", "Ctrl+Z"))
        self.actionRedo.setText(_translate("MainWindow", "Redo"))
        self.actionRedo.setShortcut(_translate("MainWindow", "Ctrl+Y"))
        self.actionto_all_channels.setText(_translate("MainWindow", "to all channels "))
        self.actioncopy_to_channels.setText(_translate("MainWindow", "copy to channels "))
        self.actiondelete.setText(_translate("MainWindow", "delete "))
        self.actiondelete.setShortcut(_translate("MainWindow", "Del"))
        self.actionchange_channel.setText(_translate("MainWindow", "change channel "))
        self.actionchange_type.setText(_translate("MainWindow", "change type"))
        self.actioninsert_over.setText(_translate("MainWindow", "insert over "))
        self.actioninsert_over.setShortcut(_translate("MainWindow", "Ctrl+I"))
        self.actionNew_event.setText(_translate("MainWindow", "New event"))
        self.actionNew_event.setShortcut(_translate("MainWindow", "Ctrl+1"))
        self.actionedit_event.setText(_translate("MainWindow", "edit event "))
        self.actionedit_event.setShortcut(_translate("MainWindow", "Ctrl+2"))
        self.actionScroll.setText(_translate("MainWindow", "Scroll"))
        self.actionScroll.setShortcut(_translate("MainWindow", "Ctrl+3"))
        self.actionView_options.setText(_translate("MainWindow", "View options "))
        self.actionStatus_bar.setText(_translate("MainWindow", "Status bar "))
        self.actionEvents.setText(_translate("MainWindow", "Events..."))
        self.actionChannels.setText(_translate("MainWindow", "Channels..."))
        self.actionScale_All.setText(_translate("MainWindow", "Scale All..."))
        self.actionZoom_in_vertical.setText(_translate("MainWindow", "Zoom In vertical "))
        self.actionZoom_in_vertical.setShortcut(_translate("MainWindow", "Ctrl++"))
        self.actionZoom_out_vertical.setText(_translate("MainWindow", "Zoom out vertical "))
        self.actionZoom_out_vertical.setShortcut(_translate("MainWindow", "Ctrl+-"))
        self.actionZoom_in_horizontal.setText(_translate("MainWindow", "Zoom In horizontal "))
        self.actionZoom_in_horizontal.setShortcut(_translate("MainWindow", "Alt++"))
        self.actionZoom_out_horizontal.setText(_translate("MainWindow", "Zoom Out horizontal "))
        self.actionZoom_out_horizontal.setShortcut(_translate("MainWindow", "Alt+-"))
        self.actionGo_to.setText(_translate("MainWindow", "Go to..."))
        self.actionGoto_and_Select_Next_Event.setText(_translate("MainWindow", "Goto and Select Next Event"))
        self.actionGoto_and_Select_Next_Event.setShortcut(_translate("MainWindow", "Ctrl+Right"))
        self.actionGoto_and_Select_Previos_Event.setText(_translate("MainWindow", "Goto and Select Previos Event"))
        self.actionGoto_and_Select_Previos_Event.setShortcut(_translate("MainWindow", "Ctrl+Left"))
        self.actionFit_View_to_Selected_Event.setText(_translate("MainWindow", "Fit View to Selected Event"))
        self.actionHide_Events_of_Other_Types.setText(_translate("MainWindow", "Hide Events of other Type"))
        self.actionShow_All_Events.setText(_translate("MainWindow", "Show All Events"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        self.actionSave_As.setText(_translate("MainWindow", "Save as..."))
        self.actionExort_to.setText(_translate("MainWindow", "Exort to PNG"))
        self.actionExport_to_GDF.setText(_translate("MainWindow", "Export to GDF"))
        self.actionExport_Events.setText(_translate("MainWindow", "Export Events "))
        self.actionImport_Events.setText(_translate("MainWindow", "Import Events "))
        self.actionInfo.setText(_translate("MainWindow", "Info..."))
        self.actionClose.setText(_translate("MainWindow", "Close"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionCalculate_mean.setText(_translate("MainWindow", "Calculate mean..."))
        self.actionPower_Spectrum.setText(_translate("MainWindow", "Power Spectrum..."))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionFile.setText(_translate("MainWindow", "File "))
        self.actionMode.setText(_translate("MainWindow", "Mode "))
        self.actionView.setText(_translate("MainWindow", "View "))
        self.actionHide_All_Toolbars.setText(_translate("MainWindow", "Hide All Toolbars"))
        self.actionAnimation.setText(_translate("MainWindow", "Animation "))
        self.actionSet_animation_duration.setText(_translate("MainWindow", "Set Animation Duration"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
